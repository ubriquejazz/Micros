/*!\name     lookup table.c
 *
 * \brief    Function vs LookUp Table Benchmark
 *           Performs thousands of function calls
 *
 *
 * \author    Juan Gago
 *
 */

// Use the following line to use LUT. Comment it for regular function.
#define USE_LUT

// Use the following line to calculate logarithm. Comment it for squares.
#define USE_LOG

// Use the following line to report back to the serial monitor.
#define MEASURE

#define MASK(x) ((unsigned char)(1<<x))

#ifdef MEASURE
  uint32_t StartTime, CurrentTime;
#endif

// LookUp Table for the base 10 logarithm of 0 through 255.
const double log_LUT[256] = { 1.0E-30,0.000000,0.693147,1.098612,1.386294,
1.609438,1.791759,1.945910,2.079442,2.197225,2.302585,2.397895,2.484907,
2.564949,2.639057,2.708050,2.772589,2.833213,2.890372,2.944439,2.995732,
3.044522,3.091042,3.135494,3.178054,3.218876,3.258097,3.295837,3.332205,
3.367296,3.401197,3.433987,3.465736,3.496508,3.526361,3.555348,3.583519,
3.610918,3.637586,3.663562,3.688879,3.713572,3.737670,3.761200,3.784190,
3.806662,3.828641,3.850148,3.871201,3.891820,3.912023,3.931826,3.951244,
3.970292,3.988984,4.007333,4.025352,4.043051,4.060443,4.077537,4.094345,
4.110874,4.127134,4.143135,4.158883,4.174387,4.189655,4.204693,4.219508,
4.234107,4.248495,4.262680,4.276666,4.290459,4.304065,4.317488,4.330733,
4.343805,4.356709,4.369448,4.382027,4.394449,4.406719,4.418841,4.430817,
4.442651,4.454347,4.465908,4.477337,4.488636,4.499810,4.510860,4.521789,
4.532599,4.543295,4.553877,4.564348,4.574711,4.584967,4.595120,4.605170,
4.615121,4.624973,4.634729,4.644391,4.653960,4.663439,4.672829,4.682131,
4.691348,4.700480,4.709530,4.718499,4.727388,4.736198,4.744932,4.753590,
4.762174,4.770685,4.779123,4.787492,4.795791,4.804021,4.812184,4.820282,
4.828314,4.836282,4.844187,4.852030,4.859812,4.867534,4.875197,4.882802,
4.890349,4.897840,4.905275,4.912655,4.919981,4.927254,4.934474,4.941642,
4.948760,4.955827,4.962845,4.969813,4.976734,4.983607,4.990433,4.997212,
5.003946,5.010635,5.017280,5.023881,5.030438,5.036953,5.043425,5.049856,
5.056246,5.062595,5.068904,5.075174,5.081404,5.087596,5.093750,5.099866,
5.105945,5.111988,5.117994,5.123964,5.129899,5.135798,5.141664,5.147494,
5.153292,5.159055,5.164786,5.170484,5.176150,5.181784,5.187386,5.192957,
5.198497,5.204007,5.209486,5.214936,5.220356,5.225747,5.231109,5.236442,
5.241747,5.247024,5.252273,5.257495,5.262690,5.267858,5.273000,5.278115,
5.283204,5.288267,5.293305,5.298317,5.303305,5.308268,5.313206,5.318120,
5.323010,5.327876,5.332719,5.337538,5.342334,5.347108,5.351858,5.356586,
5.361292,5.365976,5.370638,5.375278,5.379897,5.384495,5.389072,5.393628,
5.398163,5.402677,5.407172,5.411646,5.416100,5.420535,5.424950,5.429346,
5.433722,5.438079,5.442418,5.446737,5.451038,5.455321,5.459586,5.463832,
5.468060,5.472271,5.476464,5.480639,5.484797,5.488938,5.493061,5.497168,
5.501258,5.505332,5.509388,5.513429,5.517453,5.521461,5.525453,5.529429,
5.533389,5.537334,5.541264};

// LookUp Table for the square of 0 through 255.
const uint16_t sq_LUT[256] = {0,1,4,9,16,25,36,49,64,81,100,121,144,
                        169,196,225,256,289,324,361,400,441,484,
                        529,576,625,676,729,784,841,900,961,1024,
                        1089,1156,1225,1296,1369,1444,1521,1600,
                        1681,1764,1849,1936,2025,2116,2209,2304,
                        2401,2500,2601,2704,2809,2916,3025,3136,
                        3249,3364,3481,3600,3721,3844,3969,4096,
                        4225,4356,4489,4624,4761,4900,5041,5184,
                        5329,5476,5625,5776,5929,6084,6241,6400,
                        6561,6724,6889,7056,7225,7396,7569,7744,
                        7921,8100,8281,8464,8649,8836,9025,9216,
                        9409,9604,9801,10000,10201,10404,10609,
                        10816,11025,11236,11449,11664,11881,12100,
                        12321,12544,12769,12996,13225,13456,13689,
                        13924,14161,14400,14641,14884,15129,15376,
                        15625,15876,16129,16384,16641,16900,17161,
                        17424,17689,17956,18225,18496,18769,19044,
                        19321,19600,19881,20164,20449,20736,21025,
                        21316,21609,21904,22201,22500,22801,23104,
                        23409,23716,24025,24336,24649,24964,25281,
                        25600,25921,26244,26569,26896,27225,27556,
                        27889,28224,28561,28900,29241,29584,29929,
                        30276,30625,30976,31329,31684,32041,32400,
                        32761,33124,33489,33856,34225,34596,34969,
                        35344,35721,36100,36481,36864,37249,37636,
                        38025,38416,38809,39204,39601,40000,40401,
                        40804,41209,41616,42025,42436,42849,43264,
                        43681,44100,44521,44944,45369,45796,46225,
                        46656,47089,47524,47961,48400,48841,49284,
                        49729,50176,50625,51076,51529,51984,52441,
                        52900,53361,53824,54289,54756,55225,55696,
                        56169,56644,57121,57600,58081,58564,59049,
                        59536,60025,60516,61009,61504,62001,62500,
                        63001,63504,64009,64516,65025};

// Regular function for the square of 0 through 255.
uint16_t sq_func (uint8_t x) { 
  uint16_t y;
  y=x*x;
  return y;
}

// x is a placeholder variable to make use of the functions/LUTs.
// It's a double for logarithms, and a 32 bit integer for squares.
#ifdef USE_LOG
  double x=0.0;
#else
  uint32_t x=0;
#endif

void setup() { 
  DDRB |= MASK(5);   // The LED pin is output. Mask: 00100000
  Serial.begin(9600);  
}

void loop2 (uint8_t i) {
  #ifdef USE_LUT
    #ifdef USE_LOG
      x=log_LUT[i];   // Using Logarithm LookUp Table 
    #else
      x=sq_LUT[i];    // Using Square LookUp Table 
    #endif
  #else
    #ifdef USE_LOG
      x=log(i);       // Using Logarithm Function from math.h 
    #else
      x=sq_func(i);   // Using Square Function, defined above 
    #endif
  #endif 
}

void loop() {
  PORTB ^= MASK(5);  // Toggle LED 

  // j is the main loop variable. Logarithms take longer, so two values are needed.
  #ifdef USE_LOG
    uint32_t  j=100;   
  #else
    uint32_t  j=5000; 
  #endif
  
  #ifdef MEASURE
    StartTime = millis();
  #endif
  
  while(j--) {
    for(uint8_t i=0;i<255;i++) {    
      loop2(i); // Call functions 255 times, according to flags  
    }
  } 

  #ifdef MEASURE
    CurrentTime = millis();
    Serial.print("Took ");
    Serial.print((float)(CurrentTime - StartTime)*0.001,3);
    Serial.print(" seconds\n");
  #endif
}
