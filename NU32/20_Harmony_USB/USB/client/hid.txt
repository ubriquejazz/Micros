
The hid.{c,h} library assumes you have defined the array
HID_REPORT somewhere (talkingHID.c). This array contains the HID report descriptor.

Description of the functions declared in hid.h

	hid_setup	- initialize USB middleware

	hid_open 	- opens Harmony HID

	hid_receive - requests a report from host

	hid_send	- send a report to the host 

	hid_update	- Harmony HID state machine

	hid_time	- 1ms period

	hid_idle_expired : if the device (PIC32) has not sent data for too long


== Descriptors (system_config.h) ==

We need to set up many macros for the Harmony USB driver and middleware layers
The documentation describes the details but what is important to understand is that:

	It has two endpoints (in addition to the endpoint 0). One is used to send data to the host
	(an in-endpoitn) and the other is used to receive data from the host (out-endpoint)

	The macros prefixed with DRV_USB are for the USB driver, whereas those prefixed with
	USB_DEVICE are the USB middleware

You might notice the strange definition for 

	NU32_DEVICE __NAME  	"\x18\x03T\0a\0l\0k\0i\0n\0g\0 \0H\0I\0D\0"

This macro defines a USB string descriptor: begins with a one-byte length (0x18), 
a one-byte ID (3) and then each subsequent character is two bytes long. The \0
inserts a 0 to conform the two bytes format.

We also specify that we are not using a particular HID subclass or protocol because
we are using HID to trasnfer raw data that the host OS need not interpret. 

	NU32_HID __SUBCLASS		USB_HID_SUBCLASS_CODE_NO_SUBCLASS
	NU32_HID __PROTOCOL		USB_HID_PROTOCOL_CODE_NONE


== Implementation (hid.c) == 

Much of hid.c is devoted to configuring descritpors according to the UBS standard. They are 
placed into structures defined by Harmony so that Harmony functions can use them. We also
define initialization structures for the USB middleware. The middleware relies on the USB 
driver layer to detect USB events and dispatch them to two callbacks. We use those callbacks
to maintain the state of the current USB transaction; the state tracks when we are
sending or receiving data, for example.

We define two descriptors:

	device_descriptor: VID, PID, USB version

	configuration_descriptors: HID device, one out-endpoint, one in_endpoint

	string_descriptors (Harmony): manufacturer, device name (NU32_DEVICE_NAME)
	note that they start with one byte for the length, a byte (0x03), 16-bit characters

To be used with Harmony, the USB descriptors must be placed in specific variables: 

	endpoint_table, configuration_table, master_descriptor

We also must define initialization structures for the HID layer (hid_init) abd the USB Device
Layer (usb_device_init). The function_table is used to inform the Harmony device layer that 
it should use Harmony's HID functions. We then define a variable to store a handle to the USB
middleware.

We must implements two callbacks: one for the device layer (usb_device_handler)
and other for the HID layer (usb_hid_handler). As the program runs, varios events will occur
and these callbacks will be called appropriately. Both of these callbacks modify the state of
the system which we track using the usb_status global.

The device callback is registered when the device is opened, whereas the HID callback is 
registered in the device callback in response to the event that occurs when the host configure
the device.

Our callbacks only handle a small subset of the possible events but this is enough for our 
purposes. The most important HID events are

	USB_DEVICE_HID __EVENT_REPORT_SENT : a report has been sent to the host

	USB_DEVICE_HID __EVENT_REPORT_RECEIVED : a report has been received from the host

The important event handled by the generic USB device layer are:

	USB_DEVICE __EVENT_CONFIGURED : the host has configured the device and the HID event handler is
	registered

	USB_DEVICE __EVENT_POWER_DETECTED : the device has detected power, we call USB_DEVICE_Attach
	to tell Harmony to configure teh device and receive subsequent events.

To help update the USB device module's state we must call USB_DEVICE_Tasks frequently
(hid_update functions)


== Exercise ==

What happends if talkingHID.c wants to communicate a string exceeding 64 bytes to/from host?
Modify talkingHID.c and client.c so that strings longer than 64 bytes can be handled.




